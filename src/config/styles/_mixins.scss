/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $category Optional category to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $category: regular, $where: before) {
	text-decoration: none;

	&:#{$where} {
		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		display: inline-block;
		font-style: normal;
		font-variant: normal;
		text-rendering: auto;
		line-height: 1;
		text-transform: none !important;

		@if ($category == brands) {
			font-family: "Font Awesome 5 Brands";
		} @else if ($category == solid) {
			font-family: "Font Awesome 5 Free";
			font-weight: 900;
		} @else {
			font-family: "Font Awesome 5 Free";
			font-weight: 400;
		}
	}
}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0, 0, 0, 0), $important: null) {
	@if $important {
		$important: "!important";
	}

	$x: 0.1em;

	@if unit(_size(element-margin)) == "rem" {
		$x: 0.1rem;
	}

	padding: ($tb + nth($pad, 1)) ($lr + nth($pad, 2)) max($x, $tb - _size(element-margin) + nth($pad, 3))
		($lr + nth($pad, 4)) #{$important};
}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {
	$svg: str-replace($svg, '"', "'");
	$svg: str-replace($svg, "%", "%25");
	$svg: str-replace($svg, "<", "%3C");
	$svg: str-replace($svg, ">", "%3E");
	$svg: str-replace($svg, "&", "%26");
	$svg: str-replace($svg, "#", "%23");
	$svg: str-replace($svg, "{", "%7B");
	$svg: str-replace($svg, "}", "%7D");
	$svg: str-replace($svg, ";", "%3B");

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");
}

/*
 * Media Queries mixins for Bootstrap 3
 * Definition of mixin than help us to control all breakpoints of bootstrap 3.
 * This feature is already integrated with bootstrap 4 but not for v3 version.
 * We defined 3 mixin:
 *   respond-above: build the media query to include all breakpoints higher than the breakpoint that is passed trough parametter
 *   respond-below: build the media query to include all breakpoints lower than the breakpoint that is passed trough parametter
 *   respond-between: build the media query between two breakpoints that are passed trough parametters
 */

/** Breakpoints map */
$breakpoints: (
	xs: 480px,
	sm: 600px,
	md: 960px,
	lg: 1280px,
	xl: 1920px,
);

/** Respond above mixin */
@mixin respond-above($breakpoint) {
	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) {
		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		// Write the media query.
		@media (min-width: $breakpoint-value) {
			@content;
		}
		// If the breakpoint doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

/** Respond below mixin */
@mixin respond-below($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map-get($breakpoints, $breakpoint);
		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}
	} @else {
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

/** Respond between mixin */
@mixin respond-between($lower, $upper) {
	// If both the lower and upper breakpoints exist in the map.
	@if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
		// Get the lower and upper breakpoints.
		$lower-breakpoint: map-get($breakpoints, $lower);
		$upper-breakpoint: map-get($breakpoints, $upper);
		// Write the media query.
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
			@content;
		}
		// If one or both of the breakpoints don't exist.
	} @else {
		// If lower breakpoint is invalid.
		@if (map-has-key($breakpoints, $lower) == false) {
			// Log a warning.
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}
		// If upper breakpoint is invalid.
		@if (map-has-key($breakpoints, $upper) == false) {
			// Log a warning.
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}
